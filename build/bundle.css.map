{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "Word.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import { createEventDispatcher } from 'svelte';\n  import { allWordsPotentiallySolved, cursor } from './store.js';\n\n  export let cipherword = '';\n  export let plainword = '';\n  export let startIdx = 0;\n\n  let wordEl = null;\n\n  const dispatch = createEventDispatcher();\n\n  const onKeyDown = i => e => {\n    const hasTextContent = e.key.length == 1;\n    if (hasTextContent) {\n      const newChars = [...userwordchars];\n      newChars[i] = e.key.toUpperCase();\n      userwordchars = newChars;\n    }\n    if (hasTextContent || e.key == 'ArrowRight') {\n      setTimeout(() => dispatch('cursor-forward'), 10);\n    }\n    if (e.key == 'ArrowLeft' || e.key == 'Backspace') {\n      setTimeout(() => dispatch('cursor-backward'), 10);\n    }\n  };\n\n  const onFocus = i => () => {\n    cursor.set(startIdx + i);\n  };\n\n  $: userwordchars = Array(cipherword.length).fill('');\n  $: userword = userwordchars.join('');\n\n  $: if (userword == plainword) {\n    allWordsPotentiallySolved.set(true);\n  }\n  $: if (userword != plainword && $allWordsPotentiallySolved) {\n    allWordsPotentiallySolved.set(false);\n  }\n\n  $: if (startIdx <= $cursor && $cursor < startIdx + cipherword.length && wordEl) {\n    wordEl.querySelectorAll('.cipher-input')[$cursor - startIdx].focus();\n  }\n</script>\n\n<div class=\"word\" bind:this={wordEl}>\n  {#each cipherword as cipherchar, i}\n    <div class=\"char\">\n      <span class=\"cipher-char\">{cipherchar}</span>\n      <input\n        class=\"cipher-input\"\n        value={userwordchars[i].toUpperCase()}\n        size=\"1\"\n        maxlength=\"1\"\n        on:keydown={onKeyDown(i)}\n        on:focus={onFocus(i)}\n      />\n    </div>\n  {/each}\n</div>\n\n<style>\n  .word {\n    display: flex;\n    flex-direction: row;\n    gap: 0.2rem;\n    padding-bottom: 1rem;\n  }\n\n  .char {\n    display: flex;\n    flex-direction: column;\n  }\n\n  input {\n    padding: 0;\n    margin: 0;\n    width: 1rem;\n  }\n</style>\n"
  ],
  "names": [],
  "mappings": "AA+DE,KAAK,eAAC,CAAC,AACL,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,GAAG,CACnB,GAAG,CAAE,MAAM,CACX,cAAc,CAAE,IAAI,AACtB,CAAC,AAED,KAAK,eAAC,CAAC,AACL,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,MAAM,AACxB,CAAC,AAED,KAAK,eAAC,CAAC,AACL,OAAO,CAAE,CAAC,CACV,MAAM,CAAE,CAAC,CACT,KAAK,CAAE,IAAI,AACb,CAAC"
}