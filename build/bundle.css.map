{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "App.svelte",
    "AristocratSolver.svelte",
    "Word.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import { onMount } from 'svelte';\n  import { cursor } from './store.js';\n  import { Difficulty } from './stats.js';\n  import { newAristocrat } from './crypto.js';\n  import AristocratSolver from './AristocratSolver.svelte';\n\n  let problem = null;\n  let solved = false;\n  let difficulty = Difficulty.MEDIUM;\n\n  const newProblem = () => {\n    problem = newAristocrat(difficulty);\n  };\n\n  onMount(newProblem);\n</script>\n\n<main>\n  {#if solved}\n    <p class=\"solved-msg\">Congratulations you solved the problem!</p>\n  {/if}\n  {#if problem}\n    <AristocratSolver {...problem} bind:allWordsSolved={solved} />\n  {/if}\n</main>\n\n<style>\n  .solved-msg {\n    color: green;\n  }\n</style>\n",
    "<script>\n  import { createEventDispatcher, onMount } from 'svelte';\n  import { splitText, SPLIT } from './crypto.js';\n  import Word from './Word.svelte';\n  import { allWordsPotentiallySolved, cursor } from './store.js';\n\n  export let plaintext = '';\n  export let ciphertext = '';\n  export let author = '';\n  export let allWordsSolved = false;\n\n  onMount(() => {\n    allWordsPotentiallySolved.set(false);\n    cursor.set(-1);\n  });\n\n  const dispatch = createEventDispatcher();\n\n  const isValidCursorPosition = pos => splits.some(\n    s => s.type == SPLIT.WORD && s.index <= pos && pos < s.index + s.content.length\n  );\n\n  const moveCursorForward = () => {\n    let newCursor = $cursor + 1;\n    for (;!isValidCursorPosition(newCursor) && newCursor < plaintext.length * 2; ++newCursor);\n    if (isValidCursorPosition(newCursor)) {\n      cursor.set(newCursor);\n    }\n  };\n\n  const moveCursorBackward = () => {\n    let newCursor = $cursor - 1;\n    for (;!isValidCursorPosition(newCursor) && 0 <= newCursor; --newCursor);\n    if (isValidCursorPosition(newCursor)) {\n      cursor.set(newCursor);\n    }\n  };\n\n  $: splits = splitText(ciphertext);\n  $: plainSplits = splitText(plaintext);\n  $: if ($allWordsPotentiallySolved) {\n    setTimeout(() => {\n      if ($allWordsPotentiallySolved) {\n        allWordsSolved = true;\n        dispatch('solved');\n      }\n    }, 10);\n  }\n  $: if (!$allWordsPotentiallySolved) {\n    allWordsSolved = false;\n  }\n</script>\n\n<p>Solve the following aristocrat by {author}</p>\n<div class=\"aristocrat\">\n  {#each splits as split, i}\n    {#if split.type == SPLIT.WORD}\n      <Word\n        cipherword={split.content}\n        plainword={plainSplits[i].content}\n        startIdx={split.index}\n        on:cursor-forward={moveCursorForward}\n        on:cursor-backward={moveCursorBackward}\n      />\n    {:else}\n      <div class=\"non-word\">{split.content}</div>\n    {/if}\n  {/each}\n</div>\n\n<style>\n  .aristocrat {\n    display: flex;\n    flex-direction: row;\n    flex-wrap: wrap;\n  }\n\n  .non-word {\n    margin-right: 2rem;\n  }\n</style>\n",
    "<script>\n  import { createEventDispatcher } from 'svelte';\n  import { allWordsPotentiallySolved, cursor } from './store.js';\n\n  export let cipherword = '';\n  export let plainword = '';\n  export let startIdx = 0;\n\n  let wordEl = null;\n\n  const dispatch = createEventDispatcher();\n\n  const onKeyDown = i => e => {\n    const hasTextContent = e.key.length == 1;\n    if (hasTextContent) {\n      const newChars = [...userwordchars];\n      newChars[i] = e.key.toUpperCase();\n      userwordchars = newChars;\n    }\n    if (hasTextContent || e.key == 'ArrowRight') {\n      setTimeout(() => dispatch('cursor-forward'), 10);\n    }\n    if (e.key == 'ArrowLeft' || e.key == 'Backspace') {\n      setTimeout(() => dispatch('cursor-backward'), 10);\n    }\n  };\n\n  const onFocus = i => () => {\n    cursor.set(startIdx + i);\n  };\n\n  $: userwordchars = Array(cipherword.length).fill('');\n  $: userword = userwordchars.join('');\n\n  $: if (userword == plainword) {\n    allWordsPotentiallySolved.set(true);\n  }\n  $: if (userword != plainword && $allWordsPotentiallySolved) {\n    allWordsPotentiallySolved.set(false);\n  }\n\n  $: if (startIdx <= $cursor && $cursor < startIdx + cipherword.length && wordEl) {\n    wordEl.querySelectorAll('.cipher-input')[$cursor - startIdx].focus();\n  }\n</script>\n\n<div class=\"word\" bind:this={wordEl}>\n  {#each cipherword as cipherchar, i}\n    <div class=\"char\">\n      <span class=\"cipher-char\">{cipherchar}</span>\n      <input\n        class=\"cipher-input\"\n        value={userwordchars[i].toUpperCase()}\n        size=\"1\"\n        maxlength=\"1\"\n        on:keydown={onKeyDown(i)}\n        on:focus={onFocus(i)}\n      />\n    </div>\n  {/each}\n</div>\n\n<style>\n  .word {\n    display: flex;\n    flex-direction: row;\n    gap: 0.2rem;\n    padding-bottom: 1rem;\n  }\n\n  .char {\n    display: flex;\n    flex-direction: column;\n  }\n\n  input {\n    padding: 0;\n    margin: 0;\n    width: 1rem;\n  }\n</style>\n"
  ],
  "names": [],
  "mappings": "AA4BE,WAAW,eAAC,CAAC,AACX,KAAK,CAAE,KAAK,AACd,CAAC;ACyCD,WAAW,cAAC,CAAC,AACX,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,GAAG,CACnB,SAAS,CAAE,IAAI,AACjB,CAAC,AAED,SAAS,cAAC,CAAC,AACT,YAAY,CAAE,IAAI,AACpB,CAAC;AChBD,KAAK,eAAC,CAAC,AACL,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,GAAG,CACnB,GAAG,CAAE,MAAM,CACX,cAAc,CAAE,IAAI,AACtB,CAAC,AAED,KAAK,eAAC,CAAC,AACL,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,MAAM,AACxB,CAAC,AAED,KAAK,eAAC,CAAC,AACL,OAAO,CAAE,CAAC,CACV,MAAM,CAAE,CAAC,CACT,KAAK,CAAE,IAAI,AACb,CAAC"
}